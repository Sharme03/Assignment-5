Do the below programs in anonymous function & IIFE

a) Print odd numbers in an array

Ans:

//anonymous function :

var odd = function (a) {
  for (var i = 0; i < a.length; i++) {
    if (a[i] % 2 === 1) {
      console.log(a[i]);
    }
  }
};
odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

Output:
1
3
5
7
9 

//IIFE

(function (a) {
  let odd = [];
  for (var i = 0; i < a.length; i++) {
    if (a[i] % 2 === 1) {
      odd.push(a[i]);
    }
  }

  console.log(a[i]);
});
odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

Output:
1
3
5
7
9

b) Convert all the strings to title caps in a string array

Ans:

//anonymous function :

function titleCase(str) {
  str = str.toLowerCase().split(" ");
  for (var i = 0; i < str.length; i++) {
    str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
  }
  return str.join(" ");
}
console.log(titleCase("i am sharme"));

Output:

I Am Sharme

//IIFE

(function (str) {
  let arr = str.split(" ");
  let arr1 = arr.map(
    (word) => word[0].toUpperCase() + word.slice(1).toLowerCase()
  );
  str = arr1.join(" ");
  console.log(str);
})("i am full stack developer");

Output:

I Am Full Stack Developer

c) Sum of all numbers in an array

Ans:

//anonymous function :

var getsum = function(nums){
  var sum = 0;
  for(var i=0;i<nums.length;i++){
    sum+=nums[i];
  }
  console.log(sum);
}
getsum([5,8,9,7,6,3,9,12]);

Output:
59

//IIFE

(function (nums) {
  const sum = nums.reduce((add, total) => add + total, 0);
  console.log(sum);
})([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

Output:
55

d) Return all the prime numbers in an array

Ans:

//anonymous function :

const array = [2, 3, 4, 5, 6, 7, 8, 9, 10]
function isPrime(num) {
  for (let i = 2; num > i; i++) {
    if (num % i == 0) {
      return false;
    }
  }
  return num > 1;
}

console.log(array.filter(isPrime));

Output:

(4) [2, 3, 5, 7]

//IIFE

var primeArray = (function (arr) {
  Array = arr.filter((number) => {
    for (var i = 2; i <= Math.sqrt(number); i++) {
      if (number % i === 0) return false;
    }
    return true;
  });
  return Array;
})([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);

console.log(primeArray);

Output:

(7) [1, 2, 3, 5, 7, 11, 13]



e) Return all the palindromes in an array

Ans:

//anonymous function :

function isPalindrome(word) {
  const firstHalf = word.slice(0, Math.ceil(word.length / 2));
  const secondHalfReversed = word
    .slice(Math.floor(word.length / 2))
    .split("")
    .reverse()
    .join("");

  return firstHalf === secondHalfReversed;
}

function getPalindromesFromArray(arr) {
  return arr.filter(isPalindrome);
}

const wordsArr = ['121', 'aaaa', 'civic', 'liril', '1256521', 'sharme'];

console.log(getPalindromesFromArray(wordsArr));

Output:
(5) ['121', 'aaaa', 'civic', 'liril', '1256521']


//IIFE

let a = (function (arr) {
  let palindromes = arr.filter((w) => {
    let len = w.length;
    for (let i = 0; i < len / 2; i++) {
      if (w[i] == w[len - i - 1]) {
        return true;
      } else {
        return false;
      }
    }
  });
  console.log(palindromes);
})(['121', 'aaaa', 'civic', 'liril', '1256521', 'sharme']);

Output:
(5) ['121', 'aaaa', 'civic', 'liril', '1256521']


//f. Return median of two sorted arrays of the same size

Ans:

//anonymous function :

function median(a, b) {
  let c = [...a, ...b].sort((a, b) => a - b);

  const half = (c.length / 2) | 0;

  if (c.length % 2) return c[half];

  return (c[half] + c[half - 1]) / 2;
}
const arr1 = [1, 18, 13, 27, 38];

const arr2 = [2, 13, 17, 30, 45, 47];

console.log(median(arr1, arr2));

Output:
18

//IIFE

let median = function (a, b) {
  let c = [...a, ...b].sort((a, b) => a - b);

  const half = (c.length / 2) | 0;

  if (c.length % 2) return c[half];

  return (c[half] + c[half - 1]) / 2;
};
console.log(median([1, 18, 13, 27, 38], [2, 13, 17, 30, 45, 47]));

Output:
18

//g) Remove duplicates from an array

Ans:

//anonymous function :

var arr = [1, 2, 3, 3, 4, 5,2, 6,3,6,1,"apple", "orange", "mango", "mango"];
  
    function removeDuplicates(arr) {
        var unique = [];
        arr.forEach(element => {
            if (!unique.includes(element)) {
                unique.push(element);
            }
        });
        return unique;
    }
  
    console.log(removeDuplicates(arr));
    
  Output:
  
  (9) [1, 2, 3, 4, 5, 6, 'apple', 'orange', 'mango']
  
  //IIFE
  
  var removeDuplicates = function(arr) {
        var unique = [];
        arr.forEach(element => {
            if (!unique.includes(element)) {
                unique.push(element);
            }
        });
        return unique;
    }
  
    console.log(removeDuplicates([1, 2, 3, 3, 4, 5,2, 6,3,6,1,"apple", "orange", "mango", "mango"]));
    
  Output:
  
  (9) [1, 2, 3, 4, 5, 6, 'apple', 'orange', 'mango']
  
  //h) Rotate an array by k times
  
Ans:

//anonymous function :

var arr=[1,2,3,4,5];
k=2;
var rotateArray = function(arr,k){
  for(let i=0;i<k;i++){
  arr.push(arr.shift());
  }
  return arr;
  }
  console.log(rotateArray(arr,k))
  
  Output:
  (5) [3, 4, 5, 1, 2]
  
  //IIFE
  
  (function(arr,k){
  for(let i=0;i<k;i++){
    arr.push(arr.shift());
  }
  console.log(arr,k);
})([1,2,3,4,5],[2]);

Output: 

(5) [3, 4, 5, 1, 2] [2]





